version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: finanbot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: finanbot
      POSTGRES_USER: finanbot
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Erro: POSTGRES_PASSWORD não definida}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - finanbot-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: finanbot-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:?Erro: REDIS_PASSWORD não definida}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - finanbot-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: finanbot-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://finanbot:${POSTGRES_PASSWORD}@postgres:5432/finanbot?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPEN_FINANCE_CLIENT_ID: ${OPEN_FINANCE_CLIENT_ID}
      OPEN_FINANCE_CLIENT_SECRET: ${OPEN_FINANCE_CLIENT_SECRET}
      OPEN_FINANCE_BASE_URL: ${OPEN_FINANCE_BASE_URL}
      CORS_ORIGIN: ${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - finanbot-network
    volumes:
      - ./backend/logs:/app/logs

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${BACKEND_URL:-http://localhost:3001}
        NEXT_PUBLIC_WS_URL: ${WS_URL:-ws://localhost:3001}
    container_name: finanbot-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - finanbot-network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: finanbot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - finanbot-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  finanbot-network:
    driver: bridge 